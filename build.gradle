plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
group = project.maven_group
version = "${project.mod_version}-${project.minecraft_version}"

// Shadow stuff
configurations {
    dev
    compile.extendsFrom shade
    modCompile.extendsFrom modShade
}

shadowJar {
    classifier = "shadow"
    configurations = [project.configurations.shadow]
}

repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Make a collection of all api modules we wish to use
    Set<String> apiModules = [
            "fabric-api-base",
            "fabric-command-api-v1",
            "fabric-lifecycle-events-v1"
    ]

    // Add each module as a dependency
    apiModules.forEach {
        include(modImplementation(fabricApi.module(it, project.fabric_version)))
    }

    // Fabric permission api
    modImplementation "me.lucko:fabric-permissions-api:${project.perm_version}"

    implementation "org.jetbrains:annotations:${project.jetbrains_annotations_version}"
    implementation "net.luckperms:api:${project.luckperms_version}"
    implementation "net.kyori:adventure-text-minimessage:${project.kyori_adventure_minimessage_version}"
    shadow "net.kyori:adventure-text-minimessage:${project.kyori_adventure_minimessage_version}"
    implementation "net.kyori:adventure-text-serializer-gson:${project.kyori_adventure_serializer_version}"
    shadow "net.kyori:adventure-text-serializer-gson:${project.kyori_adventure_serializer_version}"

}

// Tasks
shadowJar {
    enabled = true
    // Only shadow implementation/modImplementation
    configurations = [project.configurations.shade]
    classifier = "dev"
}

task remapJar(type: net.fabricmc.loom.task.RemapJarTask, overwrite: true) {
    from zipTree(shadowJar.archiveFile) dependsOn shadowJar
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    it.options.release = 16
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {}
}
